name: Deploy website
on:
  push:
    branches:
      - master
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3  # 官方提供的action
        with:
          path: ~/.npm  # 如果npm ci 執行時，會優先使用這裡面的檔案  # 這個檔案位置會因為 runs-on 使用的作業系統還有 安裝的依賴包差異有所改變 # 緩存其他job也可以調用
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}  # hashFiles 代表當 package-lock.json 依賴發生改變，就會棄用，讓下次npm ci變成新的，並緩存到~/.npm
      - name: Install dependencies
        run: npm ci
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      script-file: ${{ steps.publish.outputs.filename}}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3  # 官方提供的action
        with:
          path: ~/.npm  # 如果npm ci 執行時，會優先使用這裡面的檔案  # 這個檔案位置會因為 runs-on 使用的作業系統還有 安裝的依賴包差異有所改變 # 緩存其他job也可以調用
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}  # hashFiles 代表當 package-lock.json 依賴發生改變，就會棄用，讓下次npm ci變成新的，並緩存到~/.npm
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS filename
        id: publish
        run: find dist/assets/*.js -type f -execdir echo 'filename={}' >> $GITHUB_OUTPUT ';' # 打印出build 之後生成的js 文件名，並賦值到outputs 定義的參數
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files  # 名稱隨意
          path: dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v3  # 可以從上一個工作生成的artifact將他下載
        with:
          name: dist-files
      - name: Output contents
        run: ls  # 這邊會直接打印 剛剛下載的dist 文件裡面的內容
      - name: Output filename
        run: echo "${{ needs.build.outputs.script-file }}"
      - name: Deploy
        run: echo "Deploying..."
